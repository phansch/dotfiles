#!/usr/bin/env bash

set -euxo pipefail

export ANSIBLE_FORCE_COLOR=true

do_setup() {
  bootstrap "$1"
  ssh_save
  finish
}

bootstrap()
{
  if [[ "$OSTYPE" != "linux-gnu" ]]; then
    echo "[setup] You're not on Linux, sorry =( This script only works on Linux for now"
    exit 1
  fi
  print_message "[setup] Ensure prerequisites are installed"
  if is_ci; then
    # Make sure we don't get any readline prompts on CI
    echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
  fi
  run_with_sudo apt-get update -qq
  run_with_sudo apt-get install software-properties-common git wget python3-apt python3-pip python3-venv libdbus-glib-1-dev -qq

  print_message "[setup] Upgrading and autocleaning packages..."
  run_with_sudo apt-get update -qq
  run_with_sudo apt-get upgrade -qq --allow-downgrades --allow-remove-essential --allow-change-held-packages
  run_with_sudo apt-get autoremove -y -qq

  if [ -d "$HOME/.dotfiles" ]; then
    print_message "[setup] Dotfiles exist. Updating dotfiles..."
    cd "$HOME/.dotfiles" && git stash && git checkout main -q && git pull -q && (git stash pop || true)
  elif [ "${TESTING-false}" == "true" ]; then
    print_message "[setup] We're in our testing container. Hello!"
    print_message "[setup] We're about to test the code that has been mapped to the container."
    cd /code || exit 1
    cp -r /code "$HOME/.dotfiles"
  else
    print_message "[setup] Cloning dotfiles..."
    git clone -q https://github.com/phansch/dotfiles.git "$HOME/.dotfiles" && cd "$HOME/.dotfiles" || exit
  fi

  print_message "[setup] Version info"
  python3 -V
  pip3 -V
  print_message "[setup] Creating virtual env..."
  python3 -m venv .venv
  # shellcheck disable=SC1091
  source .venv/bin/activate

  print_message "[setup] Installing requirements.txt: ansible, molecule..."
  python3 -m pip install wheel
  python3 -m pip install -r requirements.txt
  pip3 uninstall -y testinfra
  pip3 install testinfra

  install_mitogen '0.3.0rc1'
  # Not exactly sure who I have to reload the env here.. Otherwise
  # `ansible-galaxy` fails immediately with an invalid interpreter error.
  # shellcheck disable=SC1091
  source .venv/bin/activate

  ansible-galaxy install -r ansible/requirements.yml --force

  install_mitogen '0.3.0rc1'

  default_playbooks=(
    ansible/playbooks/base.yml
    ansible/playbooks/dotfiles.yml
  )
  print_message "[setup] Running default playbooks..."
  ansible-playbook "${default_playbooks[@]}" --ask-become-pass -u "$USER"

  additional_playbooks=(
    ansible/playbooks/additional_packages.yml
    ansible/playbooks/udev.yml
    ansible/playbooks/backup.yml
    # ansible/playbooks/ruby.yml
  )

  cmd="ansible-playbook ${additional_playbooks[*]} --ask-become-pass -u $USER"
  if [ "$1" = "true" ] ; then
    print_message "[setup] Running all additional playbooks"
    ansible-playbook "${additional_playbooks[@]}" --ask-become-pass -u "$USER"
  else
    print_message "[setup] To run the rest of the playbooks:"
    print_message "$cmd"
  fi

}

ssh_save()
{

  if is_ci; then return; fi

  ask_for_confirmation "[setup] Do you want to add your ssh key to ssh-agent? "
  if answer_is_yes; then
    ssh-add "$HOME/.ssh/id_rsa" &>/dev/null
  fi
}

finish()
{
  if is_ci; then return; fi

  ask_for_confirmation "[setup] Almost done. Do you want to re-login now to complete the setup? "
  if answer_is_yes; then
    xfce4-session-logout --logout
  else
    echo "Well, then track it now!"
  fi
}

is_ci() {
  [[ "${CI-false}" == "true" ]] \
    && return 0 \
    || return 1
}

answer_is_yes() {
  [[ "$REPLY" =~ ^[Yy]$ ]] \
    && return 0 \
    || return 1
}

ask_for_confirmation() {
  printf "%b" "$1 (y/n)"
  read -r -n 1
  printf "%b" "\n"
}

print_message() {
  printf "%b" "$1\n"
}

# This is a wrapper around sudo for docker
run_with_sudo() {
  my_sudo=""

  if [[ $(id -u) -ne 0 ]] ; then
    print_message "We are not root, using 'sudo'"
    my_sudo='sudo'
  fi

  $my_sudo "$@"
}

install_mitogen() {
  mitogen_version="$1"
  print_message "[setup] Installing Mitogen $mitogen_version for Ansible..."
  wget "https://networkgenomics.com/try/mitogen-$mitogen_version.tar.gz"
  tar -xvzf "mitogen-$mitogen_version.tar.gz"
  rm "mitogen-$mitogen_version.tar.gz"
  rm -rf ansible/mitogen
  mv "mitogen-$mitogen_version" ansible/mitogen
}

while getopts ":as" opt; do
  case "$opt" in
    a)
      all=true
      ;;
    s)
      all=false
      ;;
    \?)
      echo >&2 \
        "usage: $0 [-a] [-s]"
      exit 1;;
  esac
done
shift $((OPTIND-1))

do_setup "$all"
